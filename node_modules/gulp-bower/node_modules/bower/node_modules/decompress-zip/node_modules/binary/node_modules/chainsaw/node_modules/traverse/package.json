{
  "name": "traverse",
  "version": "0.3.0",
  "description": "Traverse and transform objects by visiting every node on a recursive walk",
  "author": {
    "name": "James Halliday"
  },
  "license": "MIT/X11",
  "main": "./index",
  "repository": {
    "type": "git",
    "url": "http://github.com/substack/js-traverse.git"
  },
  "devDependencies": {
    "seq": ">=0.1.7",
    "expresso": ">=0.6.0"
  },
  "scripts": {
    "test": "expresso"
  },
  "readme": "traverse\n========\n\nTraverse and transform objects by visiting every node on a recursive walk.\n\nexamples\n========\n\ntransform negative numbers in-place\n-----------------------------------\n\nnegative.js\n    var Traverse = require('traverse');\n    var obj = [ 5, 6, -3, [ 7, 8, -2, 1 ], { f : 10, g : -13 } ];\n    \n    Traverse(obj).forEach(function (x) {\n        if (x < 0) this.update(x + 128);\n    });\n    \n    console.dir(obj);\n\noutput\n    [ 5, 6, 125, [ 7, 8, 126, 1 ], { f: 10, g: 115 } ]\n\ncollect leaf nodes\n------------------\n\nleaves.js\n    var Traverse = require('traverse');\n\n    var obj = {\n        a : [1,2,3],\n        b : 4,\n        c : [5,6],\n        d : { e : [7,8], f : 9 },\n    };\n\n    var leaves = Traverse(obj).reduce(function (acc, x) {\n        if (this.isLeaf) acc.push(x);\n        return acc;\n    }, []);\n\noutput\n    [ 1, 2, 3, 4, 5, 6, 7, 8, 9 ]\n\ncontext\n=======\n\nEach method that takes a callback has a context (its `this` object) with these\nattributes:\n\nnode\n----\n\nThe present node on the recursive walk\n\npath\n----\n\nAn array of string keys from the root to the present node\n\nparent\n------\n\nThe context of the node's parent.\nThis is `undefined` for the root node.\n\nkey\n---\n\nThe name of the key of the present node in its parent.\nThis is `undefined` for the root node.\n\nisRoot, notRoot\n---------------\n\nWhether the present node is the root node\n\nisLeaf, notLeaf\n---------------\n\nWhether or not the present node is a leaf node (has no children)\n\nlevel\n-----\n\nDepth of the node within the traversal\n\ncircular\n--------\n\nIf the node equals one of its parents, the `circular` attribute is set to the\ncontext of that parent and the traversal progresses no deeper.\n\nupdate(value)\n-------------\n\nSet a new value for the present node.\n\nbefore(fn)\n----------\n\nCall this function before any of the children are traversed.\n\nafter(fn)\n---------\n\nCall this function after any of the children are traversed.\n\npre(fn)\n-------\n\nCall this function before each of the children are traversed.\n\npost(fn)\n--------\n\nCall this function after each of the children are traversed.\n\nmethods\n=======\n\n.map(fn)\n--------\n\nExecute `fn` for each node in the object and return a new object with the\nresults of the walk. To update nodes in the result use `this.update(value)`.\n\n.forEach(fn)\n------------\n\nExecute `fn` for each node in the object but unlike `.map()`, when\n`this.update()` is called it updates the object in-place.\n\n.reduce(fn, acc)\n----------------\n\nFor each node in the object, perform a\n[left-fold](http://en.wikipedia.org/wiki/Fold_(higher-order_function))\nwith the return value of `fn(acc, node)`.\n\nIf `acc` isn't specified, `acc` is set to the root object for the first step\nand the root element is skipped.\n\n.paths()\n--------\n\nReturn an `Array` of every possible non-cyclic path in the object.\nPaths are `Array`s of string keys.\n\n.nodes()\n--------\n\nReturn an `Array` of every node in the object.\n\n.clone()\n--------\n\nCreate a deep clone of the object.\n\ninstallation\n============\n\nUsing npm:\n    npm install traverse\n\nOr check out the repository and link your development copy:\n    git clone http://github.com/substack/js-traverse.git\n    cd js-traverse\n    npm link .\n\nYou can test traverse with \"expresso\":http://github.com/visionmedia/expresso\n(`npm install expresso`):\n    js-traverse $ expresso\n    \n    100% wahoo, your stuff is not broken!\n\nhash transforms\n===============\n\nThis library formerly had a hash transformation component. It has been\n[moved to the hashish package](https://github.com/substack/node-hashish).\n",
  "readmeFilename": "README.markdown",
  "bugs": {
    "url": "https://github.com/substack/js-traverse/issues"
  },
  "_id": "traverse@0.3.0",
  "_from": "traverse@>=0.3.0 <0.4"
}
